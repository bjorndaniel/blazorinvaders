@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorInvaders.GameObjects
@inject IJSRuntime JsRuntime;
@inject IConfiguration Config
@inject HttpClient Http
@inject IModalService Modal

<div class="row">
    <div class="col text-center">
        <h2>Blazor Invaders - a Space Invaders implementation</h2>
    </div>
</div>
<div class="row justify-content-center">
    <div class="col text-center" id="canvas">
        <div tabindex="0" @onkeydown="@(async (e) => { await KeyDown(e); })" @onkeydown:preventDefault class="game-canvas" id="canvasContainer">
            <BECanvas @ref="_canvas"></BECanvas>
        </div>
    </div>
</div>

<img @ref="_spriteSheet" hidden src="assets/sprites_cleaned.png" />
@code{
    BECanvasComponent _canvas;
    ElementReference _spriteSheet;
    Game _game;
    bool _disableKeyboard = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _game = new Game(870, 500, Config, Http);
            await _game.Init(_canvas, _spriteSheet);
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this), 870, 500);
            _game.NewHighScore += HighScore;
        }
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        if (_game.Started)
        {
            _game.Update(timeStamp);
        }
        await _game.Render();
    }

    [JSInvokable]
    public void StartGame(float timeStamp)
    {
        _game.Start(timeStamp);
    }

    protected async ValueTask KeyDown(KeyboardEventArgs e)
    {
        if (_disableKeyboard)
        {
            return;
        }
        if (e.Code == "ArrowLeft")
        {
            _game.MovePlayer(Direction.Left);
        }
        if (e.Code == "ArrowRight")
        {
            _game.MovePlayer(Direction.Right);
        }
        if (e.Code == "Space")
        {
            if (_game.Started)
            {
                _game.Fire();
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("startGame");
            }
        }
    }

    private async Task HighScore(object sender, EventArgs args)
    {
        _disableKeyboard = true;
        var highScoreModal = Modal.Show<SetHighScore>("New High score!");
        var result = await highScoreModal.Result;
        if (!result.Cancelled)
        {
            var score = result.Data as HighScore;
            score.Score = _game.HighScore;
            _game.HighScoreName = score.Name.ToUpper();
            await Http.PostAsJsonAsync($"{Config["FunctionsApi"]}/SaveHighScore?id={_game.HighScoreGuid}", score);
        }
        _disableKeyboard = false;
    }
}
